{
  "tasks": [
    {
      "number": "1.0",
      "name": "Phase 1: Backend Infrastructure Setup",
      "description": "Setup Rails API backend with PostgreSQL, authentication, and core infrastructure",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": [],
      "files": [],
      "docs_references": ["https://guides.rubyonrails.org/api_app.html"],
      "testing_strategy": "Full backend validation with RSpec and request specs",
      "notes": "Foundation for all other phases"
    },
    {
      "number": "1.1",
      "name": "Initialize Rails API project",
      "description": "Create new Rails 7.0+ API-only application with PostgreSQL",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": [],
      "files": ["qc-api/"],
      "docs_references": ["https://guides.rubyonrails.org/api_app.html", "https://edgeguides.rubyonrails.org/getting_started.html"],
      "testing_strategy": "Unit: Rails app creation, Integration: API endpoint response",
      "notes": "rails new qc-api --api --database=postgresql"
    },
    {
      "number": "1.2",
      "name": "Configure database and environment",
      "description": "Setup PostgreSQL configuration, database.yml, and environment variables",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.1"],
      "files": ["qc-api/config/database.yml", "qc-api/.env"],
      "docs_references": ["https://guides.rubyonrails.org/configuring.html#configuring-a-database"],
      "testing_strategy": "Unit: Database connection, Integration: Migration execution",
      "notes": "Setup local PostgreSQL and production credentials"
    },
    {
      "number": "1.3",
      "name": "Convert TypeScript types to Rails models",
      "description": "Transform src/types/index.ts interfaces into ActiveRecord models with proper associations",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.2"],
      "files": ["src/types/index.ts", "qc-api/app/models/", "qc-api/db/migrate/"],
      "docs_references": ["https://guides.rubyonrails.org/active_record_basics.html", "https://guides.rubyonrails.org/association_basics.html"],
      "testing_strategy": "Unit: Model validations and associations, Integration: Database schema",
      "notes": "Create User, Couple, CheckIn, Note, ActionItem, Category, etc. models"
    },
    {
      "number": "1.4",
      "name": "Setup JWT authentication with Devise",
      "description": "Configure Devise with JWT for API authentication",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.3"],
      "files": ["qc-api/config/initializers/devise.rb", "qc-api/app/controllers/auth/"],
      "docs_references": ["https://github.com/heartcombo/devise", "https://github.com/waiting-for-dev/devise-jwt"],
      "testing_strategy": "Unit: JWT token generation, Integration: Authentication flow",
      "notes": "Include password reset, email confirmation, and refresh tokens"
    },
    {
      "number": "1.5",
      "name": "Create user registration and onboarding API",
      "description": "Implement user signup, couple creation, and onboarding flow endpoints",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.4"],
      "files": ["qc-api/app/controllers/api/v1/users_controller.rb", "qc-api/app/controllers/api/v1/couples_controller.rb"],
      "docs_references": ["https://guides.rubyonrails.org/action_controller_overview.html"],
      "testing_strategy": "Unit: Controller actions, Integration: Full registration flow",
      "notes": "Mirror POC onboarding flow with database persistence"
    },
    {
      "number": "1.6",
      "name": "Setup Action Cable for real-time features",
      "description": "Configure WebSocket support for live check-in updates and notifications",
      "parent": "1.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["1.4"],
      "files": ["qc-api/app/channels/", "qc-api/config/cable.yml"],
      "docs_references": ["https://guides.rubyonrails.org/action_cable_overview.html"],
      "testing_strategy": "Unit: Channel connections, Integration: Real-time message delivery",
      "notes": "Setup Redis for Action Cable in production"
    },
    {
      "number": "1.7",
      "name": "Implement API versioning and serializers",
      "description": "Setup API versioning structure and JSON serializers for consistent API responses",
      "parent": "1.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.5"],
      "files": ["qc-api/app/serializers/", "qc-api/config/routes.rb"],
      "docs_references": ["https://github.com/jsonapi-serializer/jsonapi-serializer"],
      "testing_strategy": "Unit: Serializer output, Integration: API response format",
      "notes": "Use JSON:API or similar for consistent serialization"
    },
    {
      "number": "1.8",
      "name": "Add API rate limiting and security",
      "description": "Implement rate limiting, CORS, and security headers",
      "parent": "1.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["1.7"],
      "files": ["qc-api/config/initializers/cors.rb", "qc-api/config/application.rb"],
      "docs_references": ["https://github.com/rack/rack-attack", "https://github.com/cyu/rack-cors"],
      "testing_strategy": "Unit: Rate limit logic, Integration: Security header validation",
      "notes": "Protect against CSRF, XSS, and implement proper CORS"
    },
    {
      "number": "2.0",
      "name": "Phase 2: Check-in System API",
      "description": "Implement check-in flow API endpoints based on CheckInContext functionality",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.0"],
      "files": ["src/contexts/CheckInContext.tsx"],
      "docs_references": [],
      "testing_strategy": "Full check-in flow validation with real-time updates",
      "notes": "Convert CheckInContext reducer actions to API endpoints"
    },
    {
      "number": "2.1",
      "name": "Create CheckIn model and associations",
      "description": "Implement CheckIn model with proper associations to User, Couple, Note, ActionItem",
      "parent": "2.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.3"],
      "files": ["qc-api/app/models/check_in.rb", "qc-api/db/migrate/20250921000001_create_check_ins.rb"],
      "docs_references": ["https://guides.rubyonrails.org/active_record_basics.html"],
      "testing_strategy": "Unit: Model validations, Integration: Association queries",
      "notes": "Include status, participants, categories, and session metadata"
    },
    {
      "number": "2.2",
      "name": "Implement check-in CRUD API",
      "description": "Create REST API endpoints for check-in management (start, update, complete, abandon)",
      "parent": "2.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.1"],
      "files": ["qc-api/app/controllers/api/v1/check_ins_controller.rb"],
      "docs_references": ["https://guides.rubyonrails.org/routing.html"],
      "testing_strategy": "Unit: Controller actions, Integration: Full CRUD operations",
      "notes": "Map CheckInContext actions to REST endpoints"
    },
    {
      "number": "2.3",
      "name": "Add check-in progress tracking API",
      "description": "Implement endpoints for step progression and category completion tracking",
      "parent": "2.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.2"],
      "files": ["qc-api/app/controllers/api/v1/check_ins/progress_controller.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Progress calculation, Integration: Step navigation",
      "notes": "Track currentStep, completedSteps, and category progress"
    },
    {
      "number": "2.4",
      "name": "Implement real-time check-in updates",
      "description": "Add Action Cable channels for live check-in synchronization between partners",
      "parent": "2.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["2.3", "1.6"],
      "files": ["qc-api/app/channels/check_in_channel.rb"],
      "docs_references": ["https://guides.rubyonrails.org/action_cable_overview.html"],
      "testing_strategy": "Unit: Channel broadcasting, Integration: Real-time sync",
      "notes": "Broadcast step changes, note updates, and completion events"
    },
    {
      "number": "2.5",
      "name": "Add session timer and timeout API",
      "description": "Implement backend timing for session duration and timeout management",
      "parent": "2.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["2.2"],
      "files": ["qc-api/app/models/session_timer.rb", "qc-api/app/controllers/api/v1/check_ins/timer_controller.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Timer calculations, Integration: Session timeout handling",
      "notes": "Track session duration, timeouts used, and automatic session end"
    },
    {
      "number": "3.0",
      "name": "Phase 3: Notes and Privacy System",
      "description": "Implement notes management with privacy controls and search functionality",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.0"],
      "files": ["src/components/notes/"],
      "docs_references": [],
      "testing_strategy": "Notes CRUD with privacy enforcement and search",
      "notes": "Three-tier privacy system (private/shared/draft)"
    },
    {
      "number": "3.1",
      "name": "Create Note model with privacy",
      "description": "Implement Note model with privacy levels and access control",
      "parent": "3.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["1.3"],
      "files": ["qc-api/app/models/note.rb", "qc-api/db/migrate/20250921000002_create_notes.rb"],
      "docs_references": ["https://guides.rubyonrails.org/active_record_basics.html"],
      "testing_strategy": "Unit: Privacy validation, Integration: Access control queries",
      "notes": "Include privacy enum, author, tags, and association to check-ins"
    },
    {
      "number": "3.2",
      "name": "Implement notes CRUD API",
      "description": "Create REST API for note management with privacy enforcement",
      "parent": "3.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["3.1"],
      "files": ["qc-api/app/controllers/api/v1/notes_controller.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Privacy enforcement, Integration: Note operations",
      "notes": "Ensure proper authorization based on privacy levels"
    },
    {
      "number": "3.3",
      "name": "Add full-text search for notes",
      "description": "Implement PostgreSQL full-text search with ranking and filtering",
      "parent": "3.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["3.2"],
      "files": ["qc-api/app/models/concerns/searchable.rb", "qc-api/db/migrate/20250921000003_add_search_to_notes.rb"],
      "docs_references": ["https://www.postgresql.org/docs/current/textsearch.html"],
      "testing_strategy": "Unit: Search queries, Integration: Search results ranking",
      "notes": "Use pg_search gem for advanced search functionality"
    },
    {
      "number": "3.4",
      "name": "Implement note tagging system",
      "description": "Add tag management and filtering for notes",
      "parent": "3.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["3.2"],
      "files": ["qc-api/app/models/tag.rb", "qc-api/app/models/note_tag.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Tag associations, Integration: Tag-based filtering",
      "notes": "Many-to-many relationship between notes and tags"
    },
    {
      "number": "3.5",
      "name": "Add note versioning and audit trail",
      "description": "Implement version history for note edits with audit logging",
      "parent": "3.0",
      "status": "pending",
      "priority": 3,
      "dependencies": ["3.2"],
      "files": ["qc-api/app/models/note_version.rb"],
      "docs_references": ["https://github.com/paper-trail-gem/paper_trail"],
      "testing_strategy": "Unit: Version tracking, Integration: History retrieval",
      "notes": "Use PaperTrail gem for comprehensive audit trail"
    },
    {
      "number": "4.0",
      "name": "Phase 4: Action Items and Reminders",
      "description": "Implement action item management and reminder system with background jobs",
      "parent": null,
      "status": "pending",
      "priority": 2,
      "dependencies": ["2.0"],
      "files": ["src/components/reminders/"],
      "docs_references": [],
      "testing_strategy": "Action items CRUD and reminder scheduling",
      "notes": "Background job processing for reminders"
    },
    {
      "number": "4.1",
      "name": "Create ActionItem model",
      "description": "Implement ActionItem model with assignment and completion tracking",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.1"],
      "files": ["qc-api/app/models/action_item.rb", "qc-api/db/migrate/20250921000004_create_action_items.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Model validations, Integration: Assignment logic",
      "notes": "Include title, description, assignedTo, dueDate, priority"
    },
    {
      "number": "4.2",
      "name": "Implement action items CRUD API",
      "description": "Create REST API for action item management and completion tracking",
      "parent": "4.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.1"],
      "files": ["qc-api/app/controllers/api/v1/action_items_controller.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: CRUD operations, Integration: Completion workflow",
      "notes": "Include bulk operations and filtering by status"
    },
    {
      "number": "4.3",
      "name": "Create Reminder model and scheduler",
      "description": "Implement Reminder model with scheduling and notification preferences",
      "parent": "4.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["4.1"],
      "files": ["qc-api/app/models/reminder.rb", "qc-api/db/migrate/20250921000005_create_reminders.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Scheduling logic, Integration: Reminder creation",
      "notes": "Support multiple reminder types and frequencies"
    },
    {
      "number": "4.4",
      "name": "Setup background job processing",
      "description": "Configure Sidekiq for background job processing and reminder delivery",
      "parent": "4.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["4.3"],
      "files": ["qc-api/app/jobs/", "qc-api/config/initializers/sidekiq.rb"],
      "docs_references": ["https://github.com/mperham/sidekiq"],
      "testing_strategy": "Unit: Job execution, Integration: Background processing",
      "notes": "Setup Redis for job queue and scheduling"
    },
    {
      "number": "4.5",
      "name": "Implement reminder notification jobs",
      "description": "Create background jobs for email, push, and in-app notifications",
      "parent": "4.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["4.4"],
      "files": ["qc-api/app/jobs/reminder_notification_job.rb", "qc-api/app/mailers/reminder_mailer.rb"],
      "docs_references": ["https://guides.rubyonrails.org/action_mailer_basics.html"],
      "testing_strategy": "Unit: Job processing, Integration: Notification delivery",
      "notes": "Support multiple notification channels"
    },
    {
      "number": "5.0",
      "name": "Phase 5: Love Languages and Growth Features",
      "description": "Implement love languages tracking and growth timeline features",
      "parent": null,
      "status": "pending",
      "priority": 2,
      "dependencies": ["3.0"],
      "files": ["src/app/love-languages/", "src/components/growth/"],
      "docs_references": [],
      "testing_strategy": "Love languages CRUD and milestone tracking",
      "notes": "Partner visibility controls and milestone achievements"
    },
    {
      "number": "5.1",
      "name": "Create LoveLanguage model",
      "description": "Implement LoveLanguage model with categories and privacy controls",
      "parent": "5.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["1.3"],
      "files": ["qc-api/app/models/love_language.rb", "qc-api/db/migrate/20250921000006_create_love_languages.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Model validations, Integration: Privacy enforcement",
      "notes": "Include categories, examples, importance levels"
    },
    {
      "number": "5.2",
      "name": "Implement love languages API",
      "description": "Create REST API for love language management with visibility controls",
      "parent": "5.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["5.1"],
      "files": ["qc-api/app/controllers/api/v1/love_languages_controller.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: CRUD operations, Integration: Visibility controls",
      "notes": "Partner can view shared love languages only"
    },
    {
      "number": "5.3",
      "name": "Create LoveAction model",
      "description": "Implement LoveAction model for actionable love language items",
      "parent": "5.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["5.1"],
      "files": ["qc-api/app/models/love_action.rb", "qc-api/db/migrate/20250921000007_create_love_actions.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Action tracking, Integration: Completion workflow",
      "notes": "Track suggested actions and completion frequency"
    },
    {
      "number": "5.4",
      "name": "Create Milestone model and tracking",
      "description": "Implement Milestone model for relationship growth tracking",
      "parent": "5.0",
      "status": "pending",
      "priority": 3,
      "dependencies": ["2.1"],
      "files": ["qc-api/app/models/milestone.rb", "qc-api/db/migrate/20250921000008_create_milestones.rb"],
      "docs_references": [],
      "testing_strategy": "Unit: Achievement logic, Integration: Milestone triggering",
      "notes": "Automatic milestone detection based on check-in patterns"
    },
    {
      "number": "5.5",
      "name": "Implement photo storage for memories",
      "description": "Setup image upload and storage for growth timeline photos",
      "parent": "5.0",
      "status": "pending",
      "priority": 3,
      "dependencies": ["5.4"],
      "files": ["qc-api/app/models/photo.rb", "qc-api/config/storage.yml"],
      "docs_references": ["https://guides.rubyonrails.org/active_storage_overview.html"],
      "testing_strategy": "Unit: File upload, Integration: Image processing",
      "notes": "Use Active Storage with cloud storage provider"
    },
    {
      "number": "6.0",
      "name": "Phase 6: Frontend Migration (React + Vite)",
      "description": "Setup new React frontend with Vite and migrate components from Next.js",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["3.0"],
      "files": ["src/components/", "src/contexts/"],
      "docs_references": ["https://vitejs.dev/guide/"],
      "testing_strategy": "Component migration with API integration",
      "notes": "95% component reuse with API client integration"
    },
    {
      "number": "6.1",
      "name": "Initialize React + Vite project",
      "description": "Create new Vite React TypeScript project with same dependencies",
      "parent": "6.0",
      "status": "pending",
      "priority": 1,
      "dependencies": [],
      "files": ["qc-frontend/"],
      "docs_references": ["https://vitejs.dev/guide/", "https://react.dev/"],
      "testing_strategy": "Unit: Build process, Integration: Development server",
      "notes": "npm create vite@latest qc-frontend -- --template react-ts"
    },
    {
      "number": "6.2",
      "name": "Setup Tailwind CSS and UI components",
      "description": "Configure Tailwind CSS and copy shadcn/ui components from POC",
      "parent": "6.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.1"],
      "files": ["qc-frontend/src/components/ui/", "qc-frontend/tailwind.config.js"],
      "docs_references": ["https://tailwindcss.com/docs/guides/vite", "https://ui.shadcn.com/"],
      "testing_strategy": "Unit: Component rendering, Integration: Styling consistency",
      "notes": "Copy all shadcn/ui components and maintain design system"
    },
    {
      "number": "6.3",
      "name": "Setup React Router and routing",
      "description": "Configure React Router to match Next.js App Router structure",
      "parent": "6.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.2"],
      "files": ["qc-frontend/src/router/", "qc-frontend/src/pages/"],
      "docs_references": ["https://reactrouter.com/en/main"],
      "testing_strategy": "Unit: Route configuration, Integration: Navigation flow",
      "notes": "Mirror POC route structure for consistency"
    },
    {
      "number": "6.4",
      "name": "Create API client with React Query",
      "description": "Setup React Query for API state management and data fetching",
      "parent": "6.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.3"],
      "files": ["qc-frontend/src/lib/api.ts", "qc-frontend/src/hooks/"],
      "docs_references": ["https://tanstack.com/query/latest"],
      "testing_strategy": "Unit: API client methods, Integration: Data fetching",
      "notes": "Replace localStorage with API calls and React Query cache"
    },
    {
      "number": "6.5",
      "name": "Implement authentication context",
      "description": "Create authentication context with JWT token management",
      "parent": "6.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.4"],
      "files": ["qc-frontend/src/contexts/AuthContext.tsx"],
      "docs_references": [],
      "testing_strategy": "Unit: Token handling, Integration: Protected routes",
      "notes": "Handle login, logout, token refresh, and protected route access"
    },
    {
      "number": "6.6",
      "name": "Setup WebSocket client for real-time",
      "description": "Implement WebSocket client for Action Cable integration",
      "parent": "6.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["6.5"],
      "files": ["qc-frontend/src/lib/websocket.ts", "qc-frontend/src/hooks/useWebSocket.ts"],
      "docs_references": ["https://github.com/actioncable/actioncable-js"],
      "testing_strategy": "Unit: WebSocket connection, Integration: Real-time updates",
      "notes": "Use @rails/actioncable for WebSocket client"
    },
    {
      "number": "7.0",
      "name": "Phase 7: Component Migration",
      "description": "Migrate all React components from Next.js to Vite with API integration",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.0"],
      "files": ["src/components/"],
      "docs_references": [],
      "testing_strategy": "Component-by-component validation with API integration",
      "notes": "Maintain 95% component reuse while replacing contexts with API calls"
    },
    {
      "number": "7.1",
      "name": "Migrate dashboard components",
      "description": "Copy and adapt dashboard components to use API data",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.4"],
      "files": ["src/components/dashboard/", "qc-frontend/src/components/dashboard/"],
      "docs_references": [],
      "testing_strategy": "Unit: Component rendering, Integration: API data loading",
      "notes": "Replace mock data with React Query hooks"
    },
    {
      "number": "7.2",
      "name": "Migrate check-in components",
      "description": "Copy check-in flow components and integrate with API",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.4", "2.0"],
      "files": ["src/components/checkin/", "qc-frontend/src/components/checkin/"],
      "docs_references": [],
      "testing_strategy": "Unit: Flow navigation, Integration: API state management",
      "notes": "Replace CheckInContext with API calls and React Query state"
    },
    {
      "number": "7.3",
      "name": "Migrate notes components",
      "description": "Copy notes management components with API integration",
      "parent": "7.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["6.4", "3.0"],
      "files": ["src/components/notes/", "qc-frontend/src/components/notes/"],
      "docs_references": [],
      "testing_strategy": "Unit: Note operations, Integration: Search and privacy",
      "notes": "Integrate with notes API and search functionality"
    },
    {
      "number": "7.4",
      "name": "Migrate settings components",
      "description": "Copy settings panels and integrate with API persistence",
      "parent": "7.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["6.4"],
      "files": ["src/components/Settings/", "qc-frontend/src/components/Settings/"],
      "docs_references": [],
      "testing_strategy": "Unit: Settings panels, Integration: Preference persistence",
      "notes": "Replace localStorage with API-backed settings"
    },
    {
      "number": "7.5",
      "name": "Migrate love languages components",
      "description": "Copy love languages components with API integration",
      "parent": "7.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["6.4", "5.0"],
      "files": ["src/app/love-languages/", "qc-frontend/src/pages/love-languages/"],
      "docs_references": [],
      "testing_strategy": "Unit: Component functionality, Integration: API data flow",
      "notes": "Integrate with love languages API and visibility controls"
    },
    {
      "number": "7.6",
      "name": "Migrate growth components",
      "description": "Copy growth timeline components with photo upload",
      "parent": "7.0",
      "status": "pending",
      "priority": 3,
      "dependencies": ["6.4", "5.0"],
      "files": ["src/components/growth/", "qc-frontend/src/components/growth/"],
      "docs_references": [],
      "testing_strategy": "Unit: Timeline rendering, Integration: Photo upload",
      "notes": "Integrate with milestones API and photo storage"
    },
    {
      "number": "8.0",
      "name": "Phase 8: Integration Testing",
      "description": "Comprehensive testing of Rails API and React frontend integration",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["7.0"],
      "files": [],
      "docs_references": [],
      "testing_strategy": "End-to-end testing with full stack integration",
      "notes": "Validate complete user workflows with real API"
    },
    {
      "number": "8.1",
      "name": "Setup Rails testing framework",
      "description": "Configure RSpec, FactoryBot, and database cleaner for Rails API testing",
      "parent": "8.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["2.0"],
      "files": ["qc-api/spec/", "qc-api/spec/rails_helper.rb"],
      "docs_references": ["https://rspec.info/", "https://github.com/thoughtbot/factory_bot"],
      "testing_strategy": "Unit: Model and controller specs, Integration: Request specs",
      "notes": "Include request specs for all API endpoints"
    },
    {
      "number": "8.2",
      "name": "Write API integration tests",
      "description": "Create comprehensive test suite for all API endpoints",
      "parent": "8.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["8.1"],
      "files": ["qc-api/spec/requests/", "qc-api/spec/models/"],
      "docs_references": [],
      "testing_strategy": "Unit: Individual endpoints, Integration: Full API workflows",
      "notes": "Test authentication, authorization, and business logic"
    },
    {
      "number": "8.3",
      "name": "Setup React testing with Vitest",
      "description": "Configure Vitest and React Testing Library for frontend testing",
      "parent": "8.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["7.0"],
      "files": ["qc-frontend/vitest.config.ts", "qc-frontend/src/test/"],
      "docs_references": ["https://vitest.dev/", "https://testing-library.com/docs/react-testing-library/intro/"],
      "testing_strategy": "Unit: Component testing, Integration: User interaction flows",
      "notes": "Mock API calls for isolated component testing"
    },
    {
      "number": "8.4",
      "name": "Write end-to-end tests",
      "description": "Create Playwright tests for critical user journeys",
      "parent": "8.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["8.2", "8.3"],
      "files": ["e2e-tests/", "playwright.config.ts"],
      "docs_references": ["https://playwright.dev/"],
      "testing_strategy": "E2E: Full user workflows, Integration: Frontend + Backend",
      "notes": "Test complete registration, check-in, and settings flows"
    },
    {
      "number": "8.5",
      "name": "Test real-time features",
      "description": "Validate WebSocket functionality and real-time synchronization",
      "parent": "8.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["8.4", "6.6"],
      "files": ["e2e-tests/realtime.spec.ts"],
      "docs_references": [],
      "testing_strategy": "E2E: Multi-client testing, Integration: WebSocket sync",
      "notes": "Test partner real-time updates during check-ins"
    },
    {
      "number": "9.0",
      "name": "Phase 9: Deployment and CI/CD",
      "description": "Setup production deployment pipeline and monitoring",
      "parent": null,
      "status": "pending",
      "priority": 1,
      "dependencies": ["8.0"],
      "files": [],
      "docs_references": [],
      "testing_strategy": "Deployment validation and monitoring setup",
      "notes": "Production-ready deployment with monitoring"
    },
    {
      "number": "9.1",
      "name": "Setup Rails production environment",
      "description": "Configure Rails for production with database, Redis, and environment variables",
      "parent": "9.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["4.4"],
      "files": ["qc-api/config/environments/production.rb", "qc-api/config/database.yml"],
      "docs_references": ["https://guides.rubyonrails.org/configuring.html#rails-environment-settings"],
      "testing_strategy": "Unit: Configuration validation, Integration: Production build",
      "notes": "Setup for Heroku or similar platform deployment"
    },
    {
      "number": "9.2",
      "name": "Configure React production build",
      "description": "Optimize Vite build for production with code splitting and asset optimization",
      "parent": "9.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["7.0"],
      "files": ["qc-frontend/vite.config.ts", "qc-frontend/.env.production"],
      "docs_references": ["https://vitejs.dev/guide/build.html"],
      "testing_strategy": "Unit: Build optimization, Integration: Production performance",
      "notes": "Optimize bundle size and implement proper caching"
    },
    {
      "number": "9.3",
      "name": "Setup CI/CD pipeline",
      "description": "Create GitHub Actions workflow for automated testing and deployment",
      "parent": "9.0",
      "status": "pending",
      "priority": 1,
      "dependencies": ["9.1", "9.2"],
      "files": [".github/workflows/ci.yml", ".github/workflows/deploy.yml"],
      "docs_references": ["https://docs.github.com/en/actions"],
      "testing_strategy": "Unit: Pipeline steps, Integration: Full deployment",
      "notes": "Separate workflows for testing and deployment"
    },
    {
      "number": "9.4",
      "name": "Setup monitoring and logging",
      "description": "Configure application monitoring with Sentry and logging aggregation",
      "parent": "9.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["9.1"],
      "files": ["qc-api/config/initializers/sentry.rb", "qc-frontend/src/lib/monitoring.ts"],
      "docs_references": ["https://docs.sentry.io/platforms/ruby/guides/rails/", "https://docs.sentry.io/platforms/javascript/guides/react/"],
      "testing_strategy": "Unit: Error capture, Integration: Monitoring alerts",
      "notes": "Monitor both Rails API and React frontend"
    },
    {
      "number": "9.5",
      "name": "Setup database backups",
      "description": "Implement automated database backup strategy",
      "parent": "9.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["9.1"],
      "files": ["scripts/backup.sh", "config/backup.yml"],
      "docs_references": ["https://www.postgresql.org/docs/current/backup-dump.html"],
      "testing_strategy": "Unit: Backup script, Integration: Restore testing",
      "notes": "Daily backups with retention policy"
    },
    {
      "number": "10.0",
      "name": "Phase 10: Beta Launch Preparation",
      "description": "Final optimizations, documentation, and beta program setup",
      "parent": null,
      "status": "pending",
      "priority": 2,
      "dependencies": ["9.0"],
      "files": [],
      "docs_references": [],
      "testing_strategy": "Beta readiness validation",
      "notes": "Polish and prepare for beta user onboarding"
    },
    {
      "number": "10.1",
      "name": "Implement beta user management",
      "description": "Create invitation system and beta user onboarding flow",
      "parent": "10.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["1.5"],
      "files": ["qc-api/app/models/beta_invitation.rb", "qc-frontend/src/pages/beta/"],
      "docs_references": [],
      "testing_strategy": "Unit: Invitation logic, Integration: Beta onboarding",
      "notes": "Controlled beta access with invitation codes"
    },
    {
      "number": "10.2",
      "name": "Create API documentation",
      "description": "Generate comprehensive API documentation with examples",
      "parent": "10.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["8.2"],
      "files": ["qc-api/doc/api/", "swagger.yml"],
      "docs_references": ["https://swagger.io/specification/"],
      "testing_strategy": "Unit: Documentation accuracy, Integration: API examples",
      "notes": "Use OpenAPI/Swagger for interactive documentation"
    },
    {
      "number": "10.3",
      "name": "Implement feedback collection",
      "description": "Add in-app feedback system for beta users",
      "parent": "10.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["7.4"],
      "files": ["qc-api/app/models/feedback.rb", "qc-frontend/src/components/feedback/"],
      "docs_references": [],
      "testing_strategy": "Unit: Feedback submission, Integration: Admin review",
      "notes": "Collect user feedback with categorization and priority"
    },
    {
      "number": "10.4",
      "name": "Performance optimization",
      "description": "Optimize database queries, API responses, and frontend loading",
      "parent": "10.0",
      "status": "pending",
      "priority": 2,
      "dependencies": ["9.4"],
      "files": ["qc-api/config/database.yml", "qc-frontend/src/lib/performance.ts"],
      "docs_references": ["https://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations"],
      "testing_strategy": "Unit: Query optimization, Integration: Performance benchmarks",
      "notes": "Add database indexing, eager loading, and frontend code splitting"
    },
    {
      "number": "10.5",
      "name": "Create admin dashboard",
      "description": "Build admin interface for beta program monitoring",
      "parent": "10.0",
      "status": "pending",
      "priority": 3,
      "dependencies": ["10.3"],
      "files": ["qc-api/app/controllers/admin/", "qc-frontend/src/pages/admin/"],
      "docs_references": [],
      "testing_strategy": "Unit: Admin functions, Integration: Monitoring data",
      "notes": "Monitor user activity, feedback, and system health"
    }
  ]
}